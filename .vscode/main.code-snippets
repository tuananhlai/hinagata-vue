{
  "Vue 3 SFC": {
    "prefix": "sfc",
    "body": [
      "<script lang=\"ts\">",
      "export interface ${TM_FILENAME_BASE}Props {}",
      "",
      "export interface ${TM_FILENAME_BASE}Emits {}",
      "",
      "export interface ${TM_FILENAME_BASE}Slots {}",
      "",
      "</script>",
      "",
      "<script lang=\"ts\" setup>",
      "const props = defineProps<${TM_FILENAME_BASE}Props>();",
      "const emits = defineEmits<${TM_FILENAME_BASE}Emits>();",
      "const slots = defineSlots<${TM_FILENAME_BASE}Slots>();",
      "</script>",
      "",
      "<template>",
      "  <div></div>",
      "</template>",
      "",
      "<style lang=\"scss\" module></style>"
    ],
    "description": "Vue 3 Single File Component boilerplate"
  },
  "Vue Context": {
    "prefix": "vctx",
    "body": [
      "import { inject, provide } from 'vue';",
      "",
      "const contextKey = Symbol('$TM_FILENAME_BASE');",
      "",
      "export type ${TM_FILENAME_BASE}Value = {",
      "};",
      "",
      "export const provide${TM_FILENAME_BASE} = (value: ${TM_FILENAME_BASE}Value) => {",
      "  provide(contextKey, value);",
      "};",
      "",
      "export const use${TM_FILENAME_BASE} = (): ${TM_FILENAME_BASE}Value => {",
      "  const val = inject<${TM_FILENAME_BASE}Value>(contextKey);",
      "  if (val == null) {",
      "    throw new Error(",
      "      'use${TM_FILENAME_BASE} must be called within a component wrapped by provide${TM_FILENAME_BASE}'",
      "    );",
      "  }",
      "",
      "  return val;",
      "};",
      ""
    ],
    "description": "Vue 3 inject/provide context with filename-based naming"
  }
}
